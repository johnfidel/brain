#!/bin/sh
#
# -----------------------------------
# author:	johnfidel
# date:		04.02.2016
# purpose:	
# -----------------------------------
 
name="build"
version="1.0"

#local variables
CONFIG_FILE=".qtbuild_config"
QT_VERSION="5.5"
PLATFORM_SPEC="-r -spec linux-g++-32"
BUILD_CONFIG="CONFIG+=release"

print_version()
{
	echo ""
	echo " Script: $name / Version: $version"
	echo " Enter -h for help"
	echo ""
}

print_help() 
{
	echo ""
	echo -e "\t scriptname:\t $name"
	echo -e "\t version:\t $version"
	echo ""
	echo " ----------------------------- help --------------------------------------------------- "
	echo ""
	echo " usage: $name [PARAM] [OPTION]"
	echo ""
	echo " Parameters:"
  echo " With no parameter, $name will try to use the last config."
  echo ""
  echo -e " configure:\t should be done the first time"
  echo -e " all [project_file] [output_dir]:\t\t executes the build process"
  echo ""
  echo " Or you can simply give in the qmake parameter directly "
	echo ""
	echo " Options:"
	echo -e " -h, -? or help: Print this help"
	echo -e " -v:\t\t show verbose output"
	echo -e " -V:\t\t show script version"
	echo ""
}

#check if all needed programs are installed
Prerequisites()
{
  # get qt path
  qtpath=$(locate Qt/$QT_VERSION -n 1)
  if [ -n "$qtpath" ]; then
    QT_PATH=$qtpath
  fi

  #check qmake
  echo "use $($QT_PATH/gcc/bin/qmake -v)"

  #check make
  which make

  # get nr of cpu
  nrofcpu=$(nproc)
  if [ $nrofcpu -gt 1 ]; then
    NR_OF_CPU="-j$nrofcpu"
  else
    NR_OF_CPU=""
  fi

  # first line of config file
  echo "$QT_PATH/gcc/bin/qmake" > $CONFIG_FILE
  echo "$PLATFORM_SPEC $BUILD_CONFIG" >> $CONFIG_FILE
  echo "make clean $NR_OF_CPU" >> $CONFIG_FILE
  echo "make $NR_OF_CPU" >> $CONFIG_FILE

}

# read out the config of configfile
GetConfig()
{

  if [ ! -e $CONFIG_FILE ]; then
    echo "no configuration available! force config"
    Prerequisites
  fi

  # read in config file
  i=0
  while read line; do
    i=`expr $i + 1`
    if [ $i -eq 1 ]; then QMAKE1=$line; fi
    if [ $i -eq 2 ]; then QMAKE2=$line; fi
    if [ $i -eq 3 ]; then CLEAN=$line; fi
    if [ $i -eq 4 ]; then MAKE=$line; fi
  done < $CONFIG_FILE
}

# this is the executing stuff function
do_stuff()
{
  # save actual path
  actualPath=$(pwd)

  if [ -n "$configure" ]; then
    Prerequisites
  fi

  if [ -n "$all" ]; then
    GetConfig

    # start build process
    echo "exit actual directory"
    cd ..
    if [ ! -e $output_dir ]; then
      mkdir -v $output_dir
    fi
    echo "go into $output_dir"
    cd $output_dir
    cmd="$QMAKE1 ../brain/$project_file $QMAKE2"
    echo "perform $cmd in directory $(pwd)"
    $cmd

    cmd=$CLEAN
    echo "perform $cmd"
    $cmd

    cmd=$MAKE
    echo "perform $cmd"
    $cmd

    #returning to initial dir
    cd $actualPath

  fi

}

# Main Script Routine
# -------------------------------------------------------------------------------------
#
# if no arguments are available
if [ -z "$1" ]; then
	echo ""
	echo "no arguments... "
	echo " Enter -h for help"
	echo ""
	exit 1
fi

# process every argument
until [ -z "$1" ]; do
  case ${1} in

		# arguments    
    "configure")
      configure="true"
    ;;

    "all")
      shift
      project_file=$1
      shift
      output_dir=$1
      all="true"
    ;;

		# options

		"-h"|"-?")
			print_help
			exit 0
		;;

		"-V")
			print_version
			exit 0
		;;

		"-v")
			verbose="true"
		;;

    *)
      echo "invalid argument $1"
      print_help
      exit 1
    ;;

	esac
	shift
done

echo "do stuff ... "

do_stuff

echo "terminated"

exit 0


