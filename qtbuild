#!/bin/bash
#
# -----------------------------------
# author:	johnfidel
# date:		04.02.2016
# purpose:	
# -----------------------------------
 
name="build"
version="1.0"

#local variables
CONFIG_FILE=".qtbuild_config"
QT_VERSION="5.6"
PLATFORM_SPEC="-r -spec linux-g++"
BUILD_CONFIG="CONFIG+=release"

print_version()
{
	echo ""
	echo " Script: $name / Version: $version"
	echo " Enter -h for help"
	echo ""
}

print_help() 
{
	echo ""
	echo -e "\t scriptname:\t $name"
	echo -e "\t version:\t $version"
	echo ""
	echo " ----------------------------- help --------------------------------------------------- "
	echo ""
	echo " usage: $name [PARAM] [OPTION]"
	echo ""
	echo " Parameters:"
  echo " With no parameter, $name will try to use the last config."
  echo ""
  echo -e " configure:\t should be done the first time"
  echo -e " all [project_file] [output_dir]:\t\t executes the build process."
  echo -e "                                 \t\t let output_dir empty if no shadow build is needed."
  echo ""
  echo " Or you can simply give in the qmake parameter directly "
	echo ""
	echo " Options:"
	echo -e " -h, -? or help: Print this help"
	echo -e " -v:\t\t show verbose output"
	echo -e " -V:\t\t show script version"
	echo ""
}

#check if all needed programs are installed
Prerequisites()
{
  echo "look for mlocate..."
  if [ -z $(which mlocate) ]; then
    echo "mlocate is not installed. Try apt-get install mlocate"
    exit 1
  fi
  
  # get qt path
  qtpath=$(mlocate Qt/$QT_VERSION -n 1)
  if [ -n "$qtpath" ]; then
    QT_PATH=$qtpath
    echo "found Qt at: $QT_PATH"
  else
    echo "Qt installation dir not found."
    echo "Try sudo updatedb and reexecute this script."
  fi

  #check make
  echo "look for make..."
  if [ -z $(which make) ]; then
    echo "make seems not to be installed. Try apt-get install build-essentials"
    exit 1
  fi

  #check qmake
  architecture=$(uname -i)
  if [ "$architecture" == "x86_64" ]; then
    QMAKE_ARCH_PATH=gcc_64/bin
  else
    QMAKE_ARCH_PATH=gcc/bin
    PLATFORM_SPEC+="-32"
  fi
  echo "use $($QT_PATH/$QMAKE_ARCH_PATH/qmake -v)"
  
  # get nr of cpu
  nrofcpu=$(nproc)
  if [ $nrofcpu -ge 2 ]; then
    echo "found $nrofcpu CPUs. Try to use them."
    NR_OF_CPU="-j$nrofcpu"
  else
    echo "only one usable CPU. Do not compile with -j option"
    NR_OF_CPU=""
  fi

  # first line of config file
  echo "$QT_PATH/$QMAKE_ARCH_PATH/qmake" > $CONFIG_FILE
  echo "$PLATFORM_SPEC $BUILD_CONFIG" >> $CONFIG_FILE
  echo "make clean $NR_OF_CPU" >> $CONFIG_FILE
  echo "make $NR_OF_CPU" >> $CONFIG_FILE

}

# read out the config of configfile
GetConfig()
{

  if [ ! -e $CONFIG_FILE ]; then
    echo "no configuration available! force config"
    Prerequisites
  fi

  # read in config file
  i=0
  while read line; do
    i=`expr $i + 1`
    if [ $i -eq 1 ]; then QMAKE1=$line; fi
    if [ $i -eq 2 ]; then QMAKE2=$line; fi
    if [ $i -eq 3 ]; then CLEAN=$line; fi
    if [ $i -eq 4 ]; then MAKE=$line; fi
  done < $CONFIG_FILE
}

# this is the executing stuff function
do_stuff()
{
  # save actual path
  actualPath=$(pwd)
  echo "actually in directory: $actualPath"

  # get all prerequisites, if we should configure
  if [ -n "$configure" ]; then
    Prerequisites
  fi

  # start build for all
  if [ -n "$all" ]; then
    GetConfig

    # start build process
    if [ ! -z $output_dir ]; then
      echo "exit actual directory"
      cd ..
      if [ ! -e $output_dir ]; then
        mkdir -v $output_dir
      fi
      echo "go into $output_dir"
      cd $output_dir
    fi

    # check if a projectfile is provided, if not take the first one found in
    # actual directory
    if [ -z $project_file ]; then
      project_file=$(ls *.pro)
    fi

    # create full qmake command
    cmd="$QMAKE1 $actualPath/$project_file $QMAKE2"
    echo "perform $cmd"

    # execute qmake command
    if [ -z $verbose ]; then
      $cmd > /dev/zero
    else
      $cmd > /dev/zero
    fi

    # create clean command
    cmd=$CLEAN
    echo "perform $cmd"

    if [ -z $verbose ]; then
      $cmd > /dev/zero
    else
      $cmd
    fi

    # create make command
    cmd=$MAKE
    echo "perform $cmd"

    if [ -z $verbose ]; then
      $cmd > /dev/zero
    else
      $cmd
    fi

    #returning to initial dir
    cd $actualPath

  fi

}

# Main Script Routine
# -------------------------------------------------------------------------------------
#
# if no arguments are available
if [ -z "$1" ]; then
	echo ""
	echo "no arguments... "
	echo " Enter -h for help"
	echo ""
	exit 1
fi

# process every argument
until [ -z "$1" ]; do
  case ${1} in

		# arguments    
    "configure")
      configure="true"
    ;;

    "all")
      if [ $# -gt 1 ]; then
        shift
        project_file=$1
      fi
      if [ $# -gt 1 ]; then
        shift
        output_dir=$1
      fi   
      all="true"
    ;;

		# options

		"-h"|"-?")
			print_help
			exit 0
		;;

		"-V")
			print_version
			exit 0
		;;

		"-v")
			verbose="true"
		;;

    *)
      echo "invalid argument $1"
      print_help
      exit 1
    ;;

	esac
	shift
done

echo "do stuff ... "

do_stuff

echo "terminated"

exit 0


